% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plu_more.R
\name{plu_more}
\alias{plu_more}
\alias{more}
\title{Collapse a vector into a natural language string with a maximum number
of elements}
\usage{
plu_more(
  x,
  max = 5,
  type = TRUE,
  fn = NULL,
  ...,
  det = "more",
  sep = ", ",
  conj = " and ",
  oxford = getOption("plu.oxford_comma", FALSE)
)

more(
  x,
  max = 5,
  type = TRUE,
  fn = NULL,
  ...,
  det = "more",
  sep = ", ",
  conj = " and ",
  oxford = getOption("plu.oxford_comma", FALSE)
)
}
\arguments{
\item{x}{A \link{character} vector (or a vector coercible to character).}

\item{max}{The maximum number of items to list.
Additional arguments are replaced with "{n} more".
Defaults to \code{5}.
If \code{max} if \code{\link{Inf}}, \code{\link{NULL}}, \code{\link{FALSE}}, or \code{\link{NA}}, all elements are
preserved.}

\item{type}{A \link{logical} or \link{character}.
\itemize{
\item If a character, \code{type} is pasted after the number of elements.
\item If \code{TRUE}, the default, the first \link{class} of \code{x} is pasted after the
number of elements.
\item If \code{x} is not \link{atomic} (e.g. a \link{list}), "element" is used in place of a
class name.
\item If \code{FALSE} or \code{NA}, nothing is pasted after the number of elements.
}}

\item{fn}{A function to apply to the number of additional elements.
Default to \code{\link{NULL}}, which applies no function.}

\item{...}{Additional arguments to \code{fn}.}

\item{det}{A determiner to place before the number of additional elements.
Defaults to "more".}

\item{sep}{A \link{character} to place between list items. Defaults to \code{", "}}

\item{conj}{A \link{character} to place between the penultimate and last
list items.
Defaults to \code{" and "}.
If \code{\link{NULL}}, \code{sep} is used.}

\item{oxford}{A \link{logical} indicating whether to place \code{sep} before \code{conj}
(x, y, and z) or not (x, y and z) in lists of length three or more.
Defaults to \code{FALSE}.
The default can be changed by setting \code{options(plu.oxford_comma)}.}
}
\value{
A character vector of length 1.
}
\description{
Collapse a vector into a natural language string with a maximum number
of elements
}
\examples{
plu::more(letters)

# Setting `max`
plu::more(letters, max = 10)
plu::more(letters, max = 27)

# If `max` is Inf or NULL, all elements will be preserved
plu::more(letters, max = Inf)

# If `max` is less than one, no elements will be preserved
plu::more(letters, max = 0)

# Setting `type`
plu::more(letters, type = "letter")

# If `type` is FALSE or NULL, no type will be included
plu::more(letters, type = FALSE)

# Automatically generating type
plu::more(1:100)
plu::more(as.list(1:100))
plu::more(fracture::fracture((1:9) / (9:1)))

# Applying a function to the number
plu::more(letters, fn = nombre::cardinal)
message(plu::more(sapply(letters, crayon::blue), fn = crayon::blue))

# Automatic pluralization of type
fish <- c("sea bass", "pale chub", "crucian carp", "dace", "coelecanth")
plu::more(fish, max = 3, type = "fish")
plu::more(fish, max = 4, type = "fish")

teeth <- c("incisor", "canine", "premolar", "molar", "wisdom tooth")
more(teeth, max = 3, type = "tooth")
more(teeth, max = 4, type = "tooth")

cacti <- c("saguaro", "prickly pear", "barrel", "star", "chin")
more(cacti, max = 3, type = "cactus")
more(cacti, max = 4, type = "cactus")

# Formatting with `sep`, `conj`, and `oxford`
more(letters, conj = " or ", det = "other")

more(letters, oxford = FALSE)
more(letters, oxford = TRUE)

more(letters, sep = "; ", oxford = TRUE)
more(letters, sep = " + ", conj = " + ... + ")

# Using plu_more() within a function
verbose_sqrt <- function(x) {
  if (any(x < 0)) {
    problems <- crayon::silver(encodeString(x[x < 0], quote = "`"))

    warning(
      "Square root is undefined for ",
      plu_more(problems, fn = crayon::silver, type = "input."),
      call. = FALSE
    )
  }

  suppressWarnings(sqrt(x))
}

verbose_sqrt(-10:10)
}
